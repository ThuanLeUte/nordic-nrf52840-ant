<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52840_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52840_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Apr 03 18:03:25 2022
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[7d]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">std_n</a><BR>
 <LI><a href="#[e4]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e4]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from nrfx_power.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from port_cmsis_systick.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">USBD_IRQHandler</a> from nrfx_usbd.o(i.USBD_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[61]">ant_bpwr_disp_evt_handler</a> from ant_bpwr.o(i.ant_bpwr_disp_evt_handler) referenced from app_ant.o(sdh_ant_observers1)
 <LI><a href="#[62]">ant_bsc_disp_evt_handler</a> from ant_bsc.o(i.ant_bsc_disp_evt_handler) referenced from app_ant.o(sdh_ant_observers1)
 <LI><a href="#[63]">ant_evt_handler</a> from ant_state_indicator.o(i.ant_evt_handler) referenced from ant_state_indicator.o(sdh_ant_observers1)
 <LI><a href="#[60]">ant_hrm_disp_evt_handler</a> from ant_hrm.o(i.ant_hrm_disp_evt_handler) referenced from app_ant.o(sdh_ant_observers1)
 <LI><a href="#[42]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced from bsp.o(.constdata)
 <LI><a href="#[3a]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[45]">ev_dma_epin0_handler</a> from nrfx_usbd.o(i.ev_dma_epin0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[46]">ev_dma_epin1_handler</a> from nrfx_usbd.o(i.ev_dma_epin1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[47]">ev_dma_epin2_handler</a> from nrfx_usbd.o(i.ev_dma_epin2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[48]">ev_dma_epin3_handler</a> from nrfx_usbd.o(i.ev_dma_epin3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[49]">ev_dma_epin4_handler</a> from nrfx_usbd.o(i.ev_dma_epin4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4a]">ev_dma_epin5_handler</a> from nrfx_usbd.o(i.ev_dma_epin5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4b]">ev_dma_epin6_handler</a> from nrfx_usbd.o(i.ev_dma_epin6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4c]">ev_dma_epin7_handler</a> from nrfx_usbd.o(i.ev_dma_epin7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4e]">ev_dma_epin8_handler</a> from nrfx_usbd.o(i.ev_dma_epin8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4f]">ev_dma_epout0_handler</a> from nrfx_usbd.o(i.ev_dma_epout0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[50]">ev_dma_epout1_handler</a> from nrfx_usbd.o(i.ev_dma_epout1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[51]">ev_dma_epout2_handler</a> from nrfx_usbd.o(i.ev_dma_epout2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[52]">ev_dma_epout3_handler</a> from nrfx_usbd.o(i.ev_dma_epout3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[53]">ev_dma_epout4_handler</a> from nrfx_usbd.o(i.ev_dma_epout4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[54]">ev_dma_epout5_handler</a> from nrfx_usbd.o(i.ev_dma_epout5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[55]">ev_dma_epout6_handler</a> from nrfx_usbd.o(i.ev_dma_epout6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[56]">ev_dma_epout7_handler</a> from nrfx_usbd.o(i.ev_dma_epout7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[57]">ev_dma_epout8_handler</a> from nrfx_usbd.o(i.ev_dma_epout8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[5b]">ev_epdata_handler</a> from nrfx_usbd.o(i.ev_epdata_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[4d]">ev_setup_data_handler</a> from nrfx_usbd.o(i.ev_setup_data_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[5a]">ev_setup_handler</a> from nrfx_usbd.o(i.ev_setup_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[58]">ev_sof_handler</a> from nrfx_usbd.o(i.ev_sof_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[44]">ev_started_handler</a> from nrfx_usbd.o(i.ev_started_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[59]">ev_usbevent_handler</a> from nrfx_usbd.o(i.ev_usbevent_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[43]">ev_usbreset_handler</a> from nrfx_usbd.o(i.ev_usbreset_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[5f]">m_shutdown_handler</a> from ant_state_indicator.o(i.m_shutdown_handler) referenced from ant_state_indicator.o(pwr_mgmt_data1)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[65]">nrf_drv_power_sdh_soc_evt_handler</a> from nrf_drv_power.o(i.nrf_drv_power_sdh_soc_evt_handler) referenced from nrf_drv_power.o(sdh_soc_observers0)
 <LI><a href="#[68]">nrf_drv_power_sdh_state_evt_handler</a> from nrf_drv_power.o(i.nrf_drv_power_sdh_state_evt_handler) referenced from nrf_drv_power.o(sdh_state_observers0)
 <LI><a href="#[5e]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[5d]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[5c]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[66]">nrf_sdh_ant_evts_poll</a> from nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll) referenced from nrf_sdh_ant.o(sdh_stack_observers0)
 <LI><a href="#[40]">nrfx_usbd_consumer</a> from nrfx_usbd.o(i.nrfx_usbd_consumer) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[3e]">nrfx_usbd_feeder_flash</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[3f]">nrfx_usbd_feeder_flash_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[3c]">nrfx_usbd_feeder_ram</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[3d]">nrfx_usbd_feeder_ram_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[41]">power_usb_event_handler</a> from main.o(i.power_usb_event_handler) referenced from main.o(.constdata)
 <LI><a href="#[67]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[3b]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[64]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[39]">usbd_event_handler</a> from main.o(i.usbd_event_handler) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ba]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1bb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1bc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1bd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1be]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1bf]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[161]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[1c1]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[124]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[122]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[1c6]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[121]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[126]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[1c7]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>vPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_rescale
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>HardFault_c_handler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HardFault_c_handler &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[7e]"></a>HardFault_process</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_power.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrfx_power_irq_handler &rArr; nrf_power_event_get_and_clear &rArr; nrf_power_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, port_cmsis_systick.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_98
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_120
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_115
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_103
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrfx_usbd.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_IRQHandler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[95]"></a>ant_bpwr_cadence_decode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ant_bpwr_common_data.o(i.ant_bpwr_cadence_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_bpwr_cadence_decode &rArr; cadence_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cadence_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[61]"></a>ant_bpwr_disp_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ant_bpwr.o(i.ant_bpwr_disp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ant_bpwr_disp_evt_handler &rArr; disp_message_decode &rArr; ant_bpwr_page_18_decode &rArr; page18_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calib
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ant.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[99]"></a>ant_bpwr_page_16_decode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ant_bpwr_page_16.o(i.ant_bpwr_page_16_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_bpwr_page_16_decode &rArr; page16_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page16_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[9c]"></a>ant_bpwr_page_17_decode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ant_bpwr_page_17.o(i.ant_bpwr_page_17_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ant_bpwr_page_17_decode &rArr; page17_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_decode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page17_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[9f]"></a>ant_bpwr_page_18_decode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ant_bpwr_page_18.o(i.ant_bpwr_page_18_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ant_bpwr_page_18_decode &rArr; page18_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page18_data_log
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[a1]"></a>ant_bpwr_page_1_decode</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ant_bpwr_page_1.o(i.ant_bpwr_page_1_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_bpwr_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[9d]"></a>ant_bpwr_page_torque_decode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ant_bpwr_page_torque.o(i.ant_bpwr_page_torque_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ant_bpwr_page_torque_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_18_decode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_17_decode
</UL>

<P><STRONG><a name="[a4]"></a>ant_bpwr_page_torque_log</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ant_bpwr_page_torque.o(i.ant_bpwr_page_torque_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_rescale
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page18_data_log
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page17_data_log
</UL>

<P><STRONG><a name="[a7]"></a>ant_bsc_combined_page_0_decode</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ant_bsc_combined_page_0.o(i.ant_bsc_combined_page_0_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ant_bsc_combined_page_0_decode &rArr; comb_page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_page0_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[62]"></a>ant_bsc_disp_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ant_bsc.o(i.ant_bsc_disp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ant_bsc_disp_evt_handler &rArr; disp_message_decode &rArr; ant_bsc_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ant.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[aa]"></a>ant_bsc_page_0_decode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ant_bsc_page_0.o(i.ant_bsc_page_0_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ant_bsc_page_0_decode &rArr; page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[ac]"></a>ant_bsc_page_1_decode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ant_bsc_page_1.o(i.ant_bsc_page_1_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ant_bsc_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[ae]"></a>ant_bsc_page_2_decode</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ant_bsc_page_2.o(i.ant_bsc_page_2_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ant_bsc_page_2_decode &rArr; page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[b0]"></a>ant_bsc_page_3_decode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ant_bsc_page_3.o(i.ant_bsc_page_3_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_bsc_page_3_decode &rArr; page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[b2]"></a>ant_bsc_page_4_decode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ant_bsc_page_4.o(i.ant_bsc_page_4_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ant_bsc_page_4_decode &rArr; page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[b4]"></a>ant_bsc_page_5_decode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ant_bsc_page_5.o(i.ant_bsc_page_5_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ant_bsc_page_5_decode &rArr; page5_data_log &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page5_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[b6]"></a>ant_common_page_80_decode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ant_common_page_80.o(i.ant_common_page_80_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_common_page_80_decode &rArr; page80_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page80_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[b9]"></a>ant_common_page_81_decode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ant_common_page_81.o(i.ant_common_page_81_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ant_common_page_81_decode &rArr; page81_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page81_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[60]"></a>ant_hrm_disp_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ant_hrm.o(i.ant_hrm_disp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ant_hrm_disp_evt_handler &rArr; disp_message_decode &rArr; ant_hrm_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ant.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[bf]"></a>ant_hrm_page_0_decode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ant_hrm_page_0.o(i.ant_hrm_page_0_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ant_hrm_page_0_decode &rArr; page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[c1]"></a>ant_hrm_page_1_decode</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ant_hrm_page_1.o(i.ant_hrm_page_1_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ant_hrm_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[c3]"></a>ant_hrm_page_2_decode</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ant_hrm_page_2.o(i.ant_hrm_page_2_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ant_hrm_page_2_decode &rArr; page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[c5]"></a>ant_hrm_page_3_decode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ant_hrm_page_3.o(i.ant_hrm_page_3_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ant_hrm_page_3_decode &rArr; page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[c7]"></a>ant_hrm_page_4_decode</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ant_hrm_page_4.o(i.ant_hrm_page_4_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ant_hrm_page_4_decode &rArr; page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
</UL>

<P><STRONG><a name="[c9]"></a>app_error_fault_handler</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[bd]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_shutdown_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[109]"></a>app_timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer_freertos.o(i.app_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[ca]"></a>app_timer_start</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, app_timer_freertos.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[cd]"></a>app_timer_stop</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_timer_freertos.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[ce]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[d0]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[d4]"></a>bsp_board_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_board_init &rArr; bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>bsp_board_led_invert</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[d8]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[da]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[db]"></a>bsp_board_led_state_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[dc]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[dd]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[de]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[bb]"></a>bsp_indication_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_shutdown_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[149]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; init_power_clock &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_mouse_pointer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_resetreason
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[113]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[111]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[e2]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>

<P><STRONG><a name="[11f]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[e9]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[120]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[125]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[127]"></a>nrf_balloc_alloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[129]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[155]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[107]"></a>nrf_drv_clock_hfclk_is_running</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_clock_hfclk_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[105]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[103]"></a>nrf_drv_clock_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[108]"></a>nrf_drv_clock_lfclk_is_running</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_clock_lfclk_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[12e]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[106]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[104]"></a>nrf_drv_power_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_power_init &rArr; nrfx_power_init &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clock
</UL>

<P><STRONG><a name="[117]"></a>nrf_drv_power_usbevt_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_power_usbevt_init &rArr; nrf_drv_power_usbevt_uninit &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>nrf_drv_power_usbevt_uninit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_power_usbevt_uninit &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_uninit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_disable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[13c]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[e5]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[13d]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[142]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[18d]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[79]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 756 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[14c]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>

<P><STRONG><a name="[7d]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetInterface
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetFeature
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_ClearFeature
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_resetreason
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page18_data_log
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page17_data_log
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page16_data_log
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cadence_data_log
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_1_decode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calib
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page5_data_log
</UL>

<P><STRONG><a name="[7a]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetProtocol
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetIdle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetStatus
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respond_setup_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page81_data_log
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page80_data_log
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_log
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page16_data_log
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cadence_data_log
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_message_decode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_page0_data_log
</UL>

<P><STRONG><a name="[a6]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page81_data_log
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_log
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page0_data_log
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_page0_data_log
</UL>

<P><STRONG><a name="[7c]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetDescriptor
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[7b]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>

<P><STRONG><a name="[147]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[114]"></a>nrf_log_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[153]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[78]"></a>nrf_log_panic</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[146]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[14a]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[154]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[143]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[151]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[148]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[145]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[14b]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[bc]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[152]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[89]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_is_running
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[15a]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>

<P><STRONG><a name="[15b]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[f8]"></a>nrfx_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_atomic.o(i.nrfx_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>

<P><STRONG><a name="[12d]"></a>nrfx_clock_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[101]"></a>nrfx_clock_hfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[80]"></a>nrfx_clock_irq_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_irq_handler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>nrfx_clock_lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[10f]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[130]"></a>nrfx_power_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrfx_power.o(i.nrfx_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_power_init &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
</UL>

<P><STRONG><a name="[7f]"></a>nrfx_power_irq_handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, nrfx_power.o(i.nrfx_power_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_power_irq_handler &rArr; nrf_power_event_get_and_clear &rArr; nrf_power_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>nrfx_power_pof_handler_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_pof_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_soc_evt_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_disable
</UL>

<P><STRONG><a name="[134]"></a>nrfx_power_usb_handler_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usb_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_soc_evt_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_disable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[13a]"></a>nrfx_power_usbevt_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_power.o(i.nrfx_power_usbevt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_power_usbevt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[139]"></a>nrfx_power_usbevt_enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_power.o(i.nrfx_power_usbevt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_power_usbevt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[138]"></a>nrfx_power_usbevt_init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, nrfx_power.o(i.nrfx_power_usbevt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrfx_power_usbevt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[13b]"></a>nrfx_power_usbevt_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[40]"></a>nrfx_usbd_consumer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_consumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_consumer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[16d]"></a>nrfx_usbd_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_int_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
</UL>

<P><STRONG><a name="[171]"></a>nrfx_usbd_enable</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_usbd_enable &rArr; usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_223
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_166
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_disable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_isoinconfig_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
</UL>

<P><STRONG><a name="[ef]"></a>nrfx_usbd_ep_disable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
</UL>

<P><STRONG><a name="[eb]"></a>nrfx_usbd_ep_dtoggle_clear</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_dtoggle_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_ep_dtoggle_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
</UL>

<P><STRONG><a name="[ed]"></a>nrfx_usbd_ep_enable</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_int_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
</UL>

<P><STRONG><a name="[116]"></a>nrfx_usbd_ep_max_packet_size_set</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_max_packet_size_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>nrfx_usbd_ep_stall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetFeature
</UL>

<P><STRONG><a name="[17d]"></a>nrfx_usbd_ep_stall_check</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_ep_stall_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
</UL>

<P><STRONG><a name="[ec]"></a>nrfx_usbd_ep_stall_clear</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_usbd_ep_stall_clear &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_ClearFeature
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
</UL>

<P><STRONG><a name="[11e]"></a>nrfx_usbd_ep_transfer</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rise
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respond_setup_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_mouse_pointer
</UL>

<P><STRONG><a name="[1a2]"></a>nrfx_usbd_epout_size_get</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_epout_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[180]"></a>nrfx_usbd_feeder_buffer_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_buffer_get))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
</UL>

<P><STRONG><a name="[3e]"></a>nrfx_usbd_feeder_flash</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_usbd_feeder_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_buffer_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[3f]"></a>nrfx_usbd_feeder_flash_zlp</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_usbd_feeder_flash_zlp
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_buffer_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[3c]"></a>nrfx_usbd_feeder_ram</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrfx_usbd_feeder_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[3d]"></a>nrfx_usbd_feeder_ram_zlp</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrfx_usbd_feeder_ram_zlp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[115]"></a>nrfx_usbd_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_usbd_init &rArr; nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>nrfx_usbd_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
</UL>

<P><STRONG><a name="[181]"></a>nrfx_usbd_is_started</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_is_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrfx_usbd_is_started &rArr; _NRFX_IRQ_IS_ENABLED
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_IS_ENABLED
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
</UL>

<P><STRONG><a name="[177]"></a>nrfx_usbd_isoinconfig_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_isoinconfig_set))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[ee]"></a>nrfx_usbd_setup_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_setup_clear &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetProtocol
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetIdle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetFeature
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_ClearFeature
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
</UL>

<P><STRONG><a name="[15e]"></a>nrfx_usbd_setup_data_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_data_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_setup_data_clear &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
</UL>

<P><STRONG><a name="[1a5]"></a>nrfx_usbd_setup_get</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_get))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[184]"></a>nrfx_usbd_setup_stall</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_usbd_setup_stall &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetProtocol
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetInterface
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetIdle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetFeature
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetDescriptor
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_ClearFeature
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[185]"></a>nrfx_usbd_start</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_usbd_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
</UL>

<P><STRONG><a name="[16e]"></a>nrfx_usbd_stop</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_IS_ENABLED
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_usb_event_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[118]"></a>nrfx_usbd_suspend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_usbd_suspend &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>nrfx_usbd_transfer_out_drop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_transfer_out_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
</UL>

<P><STRONG><a name="[119]"></a>nrfx_usbd_wakeup_req</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_wakeup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_usbd_wakeup_req &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_171
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_lowpower_check
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[192]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[191]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[196]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[197]"></a>vPortExitCritical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1b3]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[19a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b4]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[6b]"></a>vTaskSwitchContext</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>xQueueGenericSend</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1b7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1b5]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[83]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[84]"></a>xTaskIncrementTick</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[199]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b6]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[cb]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ea]"></a>ep_configuration</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.ep_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ep_configuration &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[102]"></a>init_power_clock</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(i.init_power_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = init_power_clock &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_is_running
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>log_resetreason</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, main.o(i.log_resetreason))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = log_resetreason &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>move_mouse_pointer</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.move_mouse_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_mouse_pointer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>power_usb_event_handler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(i.power_usb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = power_usb_event_handler &rArr; nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>respond_setup_data</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(i.respond_setup_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = respond_setup_data &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetDescriptor
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetConfig
</UL>

<P><STRONG><a name="[39]"></a>usbd_event_handler</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, main.o(i.usbd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = usbd_event_handler &rArr; usbd_setup_GetDescriptor &rArr; respond_setup_data &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetProtocol
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetInterface
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetIdle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetFeature
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_SetConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetDescriptor
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_GetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_ClearFeature
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1a7]"></a>usbd_setup_ClearFeature</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.usbd_setup_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_setup_ClearFeature &rArr; nrfx_usbd_ep_stall_clear &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1aa]"></a>usbd_setup_GetConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.usbd_setup_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = usbd_setup_GetConfig &rArr; respond_setup_data &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respond_setup_data
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1a9]"></a>usbd_setup_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, main.o(i.usbd_setup_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = usbd_setup_GetDescriptor &rArr; respond_setup_data &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respond_setup_data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1a6]"></a>usbd_setup_GetStatus</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.usbd_setup_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = usbd_setup_GetStatus &rArr; respond_setup_data &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;respond_setup_data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1ab]"></a>usbd_setup_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.usbd_setup_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = usbd_setup_SetConfig &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_configuration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1a8]"></a>usbd_setup_SetFeature</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.usbd_setup_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_setup_SetFeature &rArr; nrfx_usbd_setup_stall &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1ac]"></a>usbd_setup_SetIdle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.usbd_setup_SetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = usbd_setup_SetIdle &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1ad]"></a>usbd_setup_SetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.usbd_setup_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_setup_SetInterface &rArr; nrfx_usbd_setup_stall &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[1ae]"></a>usbd_setup_SetProtocol</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.usbd_setup_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = usbd_setup_SetProtocol &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_handler
</UL>

<P><STRONG><a name="[d2]"></a>bsp_board_buttons_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, boards.o(i.bsp_board_buttons_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_buttons_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[d5]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[d3]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>

<P><STRONG><a name="[d7]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d9]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[42]"></a>bsp_button_event_handler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>bsp_led_indication</STRONG> (Thumb, 882 bytes, Stack size 32 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[e0]"></a>leds_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = leds_off &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[e6]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[3a]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[ff]"></a>hfclk_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfclk_start &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[e7]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[12b]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[10d]"></a>lfclk_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[10e]"></a>nrf_wdt_started</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[67]"></a>sd_state_evt_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[64]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[131]"></a>nrf_drv_power_on_sd_disable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_on_sd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_power_on_sd_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_pof_handler_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
</UL>

<P><STRONG><a name="[135]"></a>nrf_drv_power_on_sd_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_power_on_sd_enable &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_pof_handler_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
</UL>

<P><STRONG><a name="[136]"></a>nrf_drv_power_sd_usbevt_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_sd_usbevt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_power_sd_usbevt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[65]"></a>nrf_drv_power_sdh_soc_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_drv_power.o(i.nrf_drv_power_sdh_soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_power_sdh_soc_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_pof_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_power.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[68]"></a>nrf_drv_power_sdh_state_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_sdh_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_power_sdh_state_evt_handler &rArr; nrf_drv_power_on_sd_enable &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_power.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[133]"></a>nrf_power_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_power.o(i.nrf_power_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_on_sd_disable
</UL>

<P><STRONG><a name="[166]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[163]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[167]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[164]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[165]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[168]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[162]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[76]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[18c]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[10c]"></a>latch_pending_read_and_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.latch_pending_read_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[18a]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[13f]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[75]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[141]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[74]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>port_event_handle</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>port_handler_pin_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_pin_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[18b]"></a>port_handler_polarity_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[157]"></a>nrf_power_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_power.o(i.nrf_power_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_power_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_get_and_clear
</UL>

<P><STRONG><a name="[156]"></a>nrf_power_event_get_and_clear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_power.o(i.nrf_power_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_power_event_get_and_clear &rArr; nrf_power_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>

<P><STRONG><a name="[16b]"></a>nrf_power_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrf_power_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_disable
</UL>

<P><STRONG><a name="[16c]"></a>nrf_power_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrf_power_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_enable
</UL>

<P><STRONG><a name="[16a]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[169]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_power.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
</UL>

<P><STRONG><a name="[183]"></a>_NRFX_IRQ_IS_ENABLED</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, nrfx_usbd.o(i._NRFX_IRQ_IS_ENABLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _NRFX_IRQ_IS_ENABLED
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_started
</UL>

<P><STRONG><a name="[f9]"></a>bit2ep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.bit2ep))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[f7]"></a>ep2bit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ep2bit))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_sof_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>

<P><STRONG><a name="[f6]"></a>ep_state_access</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ep_state_access))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>

<P><STRONG><a name="[45]"></a>ev_dma_epin0_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin0_handler &rArr; nrf_usbd_ep0in_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>ev_dma_epin1_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin1_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>ev_dma_epin2_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin2_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>ev_dma_epin3_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin3_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>ev_dma_epin4_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin4_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>ev_dma_epin5_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin5_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>ev_dma_epin6_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin6_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>ev_dma_epin7_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epin7_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>ev_dma_epin8_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epin8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ev_dma_epin8_handler &rArr; nrf_usbd_epiniso_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>ev_dma_epout0_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ev_dma_epout0_handler &rArr; nrf_usbd_ep0out_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>ev_dma_epout1_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout1_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>ev_dma_epout2_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout2_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>ev_dma_epout3_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout3_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ev_dma_epout4_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout4_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ev_dma_epout5_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout5_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ev_dma_epout6_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout6_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>ev_dma_epout7_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_dma_epout7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ev_dma_epout7_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ev_dma_epout8_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_dma_epout8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ev_dma_epout8_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ev_epdata_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_epdata_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ev_epdata_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>ev_setup_data_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_setup_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ev_setup_data_handler &rArr; usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ev_setup_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ev_setup_handler &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ev_sof_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ev_sof_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>ev_started_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_started_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ev_usbevent_handler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_usbevent_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_usbevent_handler &rArr; nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_get
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>ev_usbreset_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_usbreset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ev_usbreset_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>nrf52_errata_166</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf52_errata_166))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[188]"></a>nrf52_errata_171</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf52_errata_171))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[17f]"></a>nrf52_errata_187</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf52_errata_187))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
</UL>

<P><STRONG><a name="[1a0]"></a>nrf52_errata_199</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf52_errata_199))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>

<P><STRONG><a name="[173]"></a>nrf52_errata_223</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf52_errata_223))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[170]"></a>nrf_usbd_disable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_disable))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[f0]"></a>nrf_usbd_ep0in_dma_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_ep0in_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_usbd_ep0in_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin0_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
</UL>

<P><STRONG><a name="[f3]"></a>nrf_usbd_ep0out_dma_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrf_usbd_ep0out_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_usbd_ep0out_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
</UL>

<P><STRONG><a name="[1a3]"></a>nrf_usbd_ep_easydma_set</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, nrfx_usbd.o(i.nrf_usbd_ep_easydma_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_usbd_ep_easydma_set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[17b]"></a>nrf_usbd_ep_enable_check</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_ep_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[f1]"></a>nrf_usbd_epin_dma_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epin_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin7_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin6_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin5_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin4_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin3_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin2_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin1_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
</UL>

<P><STRONG><a name="[f2]"></a>nrf_usbd_epiniso_dma_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrf_usbd_epiniso_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_usbd_epiniso_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
</UL>

<P><STRONG><a name="[f4]"></a>nrf_usbd_epout_dma_handler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrf_usbd_epout_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout7_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout6_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout5_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout4_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout3_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout2_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout1_handler
</UL>

<P><STRONG><a name="[15f]"></a>nrf_usbd_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
</UL>

<P><STRONG><a name="[92]"></a>nrf_usbd_event_get_and_clear</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_usbd_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_getRegPtr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>nrf_usbd_eventcause_clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_eventcause_clear))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[fc]"></a>nrf_usbd_eventcause_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_eventcause_get))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[160]"></a>nrf_usbd_getRegPtr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_getRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
</UL>

<P><STRONG><a name="[16f]"></a>nrf_usbd_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[17a]"></a>nrf_usbd_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[187]"></a>nrf_usbd_lowpower_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_lowpower_check))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
</UL>

<P><STRONG><a name="[fe]"></a>nrf_usbd_task_trigger</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_task_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_usbd_task_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_getRegPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
</UL>

<P><STRONG><a name="[1a4]"></a>nrfx_usbd_ep_to_endevent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_endevent))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[179]"></a>nrfx_usbd_ep_to_int</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>

<P><STRONG><a name="[174]"></a>nrfx_usbd_errata_187</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_187))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_errata_187
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_187
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[f5]"></a>usbd_dma_pending_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_dma_pending_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_dma_pending_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_199
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epiniso_dma_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0out_dma_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>

<P><STRONG><a name="[1a1]"></a>usbd_dma_scheduler_algorithm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.usbd_dma_scheduler_algorithm))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[93]"></a>usbd_dmareq_process</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, nrfx_usbd.o(i.usbd_dmareq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_199
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_scheduler_algorithm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_easydma_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_epout_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>usbd_enable</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, nrfx_usbd.o(i.usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_171
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_get
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[fb]"></a>usbd_ep_abort</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
</UL>

<P><STRONG><a name="[186]"></a>usbd_ep_abort_all</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrfx_usbd.o(i.usbd_ep_abort_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>

<P><STRONG><a name="[fa]"></a>usbd_ep_data_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
</UL>

<P><STRONG><a name="[175]"></a>usbd_errata_187_211_begin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_errata_187_211_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_errata_187_211_begin &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[178]"></a>usbd_errata_187_211_end</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_errata_187_211_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_errata_187_211_end &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
</UL>

<P><STRONG><a name="[17e]"></a>usbd_int_rise</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_int_rise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_int_rise
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
</UL>

<P><STRONG><a name="[d1]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[cf]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[12a]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[128]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[e4]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[10a]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[13e]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[10b]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[11b]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[158]"></a>nrf_mtx_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(i.nrf_mtx_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[159]"></a>shutdown_process</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[15d]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[5e]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[e1]"></a>buf_prealloc</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[e8]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[112]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[e3]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[11c]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[19c]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[14d]"></a>std_n</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>

<P><STRONG><a name="[150]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[14e]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[18e]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[86]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[88]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[87]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[15c]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>

<P><STRONG><a name="[66]"></a>nrf_sdh_ant_evts_poll</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_sdh_ant_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ant.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[be]"></a>disp_message_decode</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ant_hrm.o(i.disp_message_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = disp_message_decode &rArr; ant_hrm_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_4_decode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_3_decode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_2_decode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_1_decode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_0_decode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_disp_evt_handler
</UL>

<P><STRONG><a name="[c0]"></a>page0_data_log</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ant_hrm_page_0.o(i.page0_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_0_decode
</UL>

<P><STRONG><a name="[c2]"></a>page1_data_log</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ant_hrm_page_1.o(i.page1_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_1_decode
</UL>

<P><STRONG><a name="[c4]"></a>page2_data_log</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ant_hrm_page_2.o(i.page2_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_2_decode
</UL>

<P><STRONG><a name="[c6]"></a>page3_data_log</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ant_hrm_page_3.o(i.page3_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_3_decode
</UL>

<P><STRONG><a name="[c8]"></a>page4_data_log</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ant_hrm_page_4.o(i.page4_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_4_decode
</UL>

<P><STRONG><a name="[63]"></a>ant_evt_handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ant_state_indicator.o(i.ant_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ant_evt_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ant_state_indicator.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[5f]"></a>m_shutdown_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ant_state_indicator.o(i.m_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_shutdown_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ant_state_indicator.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[97]"></a>disp_message_decode</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ant_bpwr.o(i.disp_message_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = disp_message_decode &rArr; ant_bpwr_page_18_decode &rArr; page18_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_common_page_81_decode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_common_page_80_decode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_1_decode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_18_decode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_17_decode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_16_decode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_cadence_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_disp_evt_handler
</UL>

<P><STRONG><a name="[98]"></a>service_calib</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ant_bpwr.o(i.service_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_calib &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_disp_evt_handler
</UL>

<P><STRONG><a name="[96]"></a>cadence_data_log</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ant_bpwr_common_data.o(i.cadence_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cadence_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_cadence_decode
</UL>

<P><STRONG><a name="[a2]"></a>page1_data_log</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, ant_bpwr_page_1.o(i.page1_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page1_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_1_decode
</UL>

<P><STRONG><a name="[9b]"></a>page16_data_log</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ant_bpwr_page_16.o(i.page16_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page16_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_16_decode
</UL>

<P><STRONG><a name="[9a]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ant_bpwr_page_16.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_16_decode
</UL>

<P><STRONG><a name="[9e]"></a>page17_data_log</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ant_bpwr_page_17.o(i.page17_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = page17_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_log
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_17_decode
</UL>

<P><STRONG><a name="[a0]"></a>page18_data_log</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ant_bpwr_page_18.o(i.page18_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = page18_data_log &rArr; ant_bpwr_page_torque_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_log
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_18_decode
</UL>

<P><STRONG><a name="[a3]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ant_bpwr_page_torque.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_decode
</UL>

<P><STRONG><a name="[a5]"></a>value_rescale</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ant_bpwr_page_torque.o(i.value_rescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = value_rescale &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bpwr_page_torque_log
</UL>

<P><STRONG><a name="[b8]"></a>page80_data_log</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ant_common_page_80.o(i.page80_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page80_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_common_page_80_decode
</UL>

<P><STRONG><a name="[b7]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ant_common_page_80.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_common_page_80_decode
</UL>

<P><STRONG><a name="[ba]"></a>page81_data_log</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ant_common_page_81.o(i.page81_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = page81_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_common_page_81_decode
</UL>

<P><STRONG><a name="[a9]"></a>disp_message_decode</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ant_bsc.o(i.disp_message_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = disp_message_decode &rArr; ant_bsc_page_1_decode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_5_decode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_4_decode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_3_decode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_2_decode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_1_decode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_0_decode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_combined_page_0_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_disp_evt_handler
</UL>

<P><STRONG><a name="[a8]"></a>comb_page0_data_log</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ant_bsc_combined_page_0.o(i.comb_page0_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = comb_page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_combined_page_0_decode
</UL>

<P><STRONG><a name="[ab]"></a>page0_data_log</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ant_bsc_page_0.o(i.page0_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = page0_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_0_decode
</UL>

<P><STRONG><a name="[ad]"></a>page1_data_log</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ant_bsc_page_1.o(i.page1_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_1_decode
</UL>

<P><STRONG><a name="[af]"></a>page2_data_log</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ant_bsc_page_2.o(i.page2_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_2_decode
</UL>

<P><STRONG><a name="[b3]"></a>page4_data_log</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ant_bsc_page_4.o(i.page4_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_4_decode
</UL>

<P><STRONG><a name="[b5]"></a>page5_data_log</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ant_bsc_page_5.o(i.page5_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page5_data_log &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_5_decode
</UL>

<P><STRONG><a name="[b1]"></a>page3_data_log</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ant_bsc_page_3.o(i.page3_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_bsc_page_3_decode
</UL>

<P><STRONG><a name="[18f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1b8]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[19f]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
</UL>

<P><STRONG><a name="[193]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[195]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[198]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[19e]"></a>ulPortRaiseBASEPRI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(i.ulPortRaiseBASEPRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1b0]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[81]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>nrf52_errata_103</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8e]"></a>nrf52_errata_115</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>nrf52_errata_120</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[90]"></a>nrf52_errata_136</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8a]"></a>nrf52_errata_36</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>nrf52_errata_66</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8c]"></a>nrf52_errata_98</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
